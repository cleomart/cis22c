                                 CIS 22C Lab 3
                              

Goal:  to give you experience with general trees and encapsulation.  The trees
we use in this lab use the SibTree data structure described in Lecture
(which you should review now). SibTrees are designed to ensure that the SibTree and 
SibTreeNode invariants (which are
written out in their respective files) cannot be violated.

All the code is in the tree package.  You can compile it from your lab10
directory with "javac -g tree/*.java".  Extensive test code is provided and
can be run with "java tree.SibTree".

Familiarize yourself with the fields and methods of the SibTree and SibTreeNode
classes.  SibTree has two fields, one inherited from the Tree abstract class.

  int size;                 // The number of SibTreeNodes in the SibTree.
  SibTreeNode root;         // The node that serves as the root of the tree.

SibTreeNode has six fields, two inherited from the TreeNode abstract class.

  Object item;              // Item stored at this SibTreeNode.
  boolean valid;            // True if and only if this is a valid node.
  SibTree myTree;           // The SibTree that contains this node.
  SibTreeNode parent;       // This node's parent.
  SibTreeNode firstChild;   // This node's first (leftmost) child.
  SibTreeNode nextSibling;  // This node's next sibling to the right.

As with the Homework 5 lists, the Tree class defines certain nodes to be
invalid.  In constrast to the Homework 5 lists, valid and invalid nodes are
distinguished solely through the state of the "valid" field.  When a TreeNode
is removed from a tree, it becomes invalid.  Methods like parent(), child(),
and nextSibling() return an invalid node (never null!) if no such node exists.
You may create an invalid node by calling the zero-parameter SibTreeNode()
constructor.  You may test whether a node n is valid by calling
n.isValidNode().

Every valid SibTreeNode is in some tree, specified by the "myTree" field.

Your task is to implement the parent(), insertChild(), and removeLeaf() methods
of the SibTreeNode class.  After you write each one, you may use the test code
to check your progress.


Check-off
---------
You'll receive points for each part that runs without printing any
error messages.  You can receive up to 5 points out of 4.
